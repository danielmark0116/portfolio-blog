{"version":3,"sources":["components/features/NavBar/NavBar.module.scss","components/features/Post/share_btn.module.scss","components/common/Logo/Logo.js","components/layout/MainMenu/MainMenu.js","components/features/NavBar/NavBar.js","components/layout/PageContainer/PageContainer.js","components/layout/MainLayout/MainLayout.tsx","components/common/PageTitle/PageTitle.js","components/common/Button/Button.js","components/common/SmallTitle/SmallTitle.js","components/common/HtmlBox/HtmlBox.tsx","components/common/TextBlock/TextBlock.tsx","components/features/Likes/Likes.tsx","redux/actionTypes.ts","redux/postsRedux.ts","components/features/Likes/LikesContainer.tsx","components/features/PostSummary/PostSummary.tsx","utils/cutText.ts","components/features/PostsList/PostsList.tsx","components/common/Pagination/Pagination.tsx","components/common/Spinner/Spinner.js","components/common/Alert/Alert.js","components/features/Posts/Posts.tsx","components/features/Posts/PostsContainer.tsx","components/pages/Home/HomePage.tsx","components/features/PostsCounter/PostsCounter.tsx","components/features/PostsCounter/PostsCounterContainer.tsx","components/pages/Posts/PostsPage.tsx","config.js","components/features/Post/Post.tsx","components/features/Post/PostContainer.tsx","components/pages/Post/PostPage.tsx","components/pages/NotFound/NotFoundPage.tsx","App.tsx","redux/store.ts","index.tsx","components/common/Pagination/Pagination.module.scss","components/features/Likes/likes.module.scss","components/common/TextBlock/TextBlock.module.scss"],"names":["module","exports","Logo","links","location","className","MainMenu","map","link","index","key","pathname","path","to","title","withRouter","props","NavBar","state","this","style","navbar","React","Component","PageContainer","children","MainLayout","PageTitle","Button","variant","otherProps","SmallTitle","HtmlBox","ReactHtmlParser","TextBlock","role","author_text","author_text_secondary","defaultProps","Likes","useState","likes","handleLike","likeUpdate","value","likePost","id","like_box","like_btn","onClick","like_btn_dislike","POSTS_GET_ALL","POSTS_GET_PAGE","POSTS_GET_ONE","POSTS_ADD_ONE","POSTS_RESET_SINGLE_POST","POSTS_START_REQUEST","POSTS_END_REQUEST","POSTS_ERROR","RESET_REQUEST_DATA","selectorPostsAll","data","selectorPageCount","Math","ceil","amount","postsPerPage","selectorActivePage","presentPage","selectorPostsPending","request","pending","selectorPostsCount","toString","selectorPostsErrorMsg","errorMsg","selectorPostsError","error","selectorPostsSuccess","success","selectorPostsGetOne","singlePost","postsGetPage","payload","type","types","postsStartRequest","postsEndRequest","postsError","postsGetOne","post","postsResetSinglePost","initState","author","content","_id","createdAt","Date","updatedAt","postSuccess","connect","ownProps","dispatch","a","axios","put","message","postsLikeThunk","PostSummary","toLocaleString","text","maxLength","lastSpaceIndex","substr","lastIndexOf","cutText","PostsList","posts","Pagination","changePage","newPage","onPageChange","setState","initialPage","pages","activePage","pagination","pagination__list","pagination__list__item","Array","el","page","pagination__list__item_active","Spinner","animationIn","animationOut","Alert","icon","Posts","pageChange","pageNo","postsGetRandom","resetRequestData","initPage","random","noOfPages","length","postsReducer","startIndex","get","response","postsCount","postsFetchPage","randomPost","HomePage","PostsCounter","PostsPage","PostsCounterContainer","PostsContainer","BASE_URL","process","Post","fetchPost","postId","appId","share_btn","href","config","width","postsFetchOneById","PostPage","PostContainer","match","params","NotFoundPage","App","exact","component","Home","NotFound","rootReducer","combineReducers","action","middleware","compose","applyMiddleware","thunk","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc031311.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"NavBar_navbar__1ntpA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"share_btn\":\"share_btn_share_btn__3e_Od\"};","import React from 'react'\r\n\r\nimport './Logo.scss';\r\n\r\nconst Logo = ({ links, location }) => (\r\n  <h1 className=\"logo\">Blog.app</h1>\r\n);\r\n\r\nexport default Logo;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport { withRouter } from 'react-router-dom';\r\nimport './MainMenu.scss';\r\n\r\nconst MainMenu = ({ links, location }) => (\r\n  <ul className=\"main-menu\">\r\n    {links.map((link, index) => (\r\n      <li key={index}>\r\n        <Link\r\n          className={(location.pathname === link.path && 'active') || ''}\r\n          to={link.path}\r\n        >\r\n          {link.title}\r\n        </Link>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nMainMenu.propTypes = {\r\n  links: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      path: PropTypes.string.isRequired,\r\n      title: PropTypes.string.isRequired\r\n    })\r\n  )\r\n};\r\n\r\nexport default withRouter(props => <MainMenu {...props} />);\r\n","import React from 'react';\nimport Logo from '../../common/Logo/Logo';\nimport MainMenu from '../../layout/MainMenu/MainMenu';\n\nimport style from './NavBar.module.scss';\n\nclass NavBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      links: [\n        { path: '/blog/', title: 'Home' },\n        // { path: '/post/random', title: 'Random post' },\n        // { path: '/posts/new', title: 'Add post' },\n        { path: '/blog/posts', title: 'Posts' }\n        // { path: '/contact', title: 'Contact' }\n      ]\n    };\n  }\n\n  render() {\n    const { links } = this.state;\n\n    return (\n      <nav className={style.navbar}>\n        <Logo links=\"\" location=\"\"></Logo>\n        <MainMenu links={links}></MainMenu>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PageContainer.scss';\n\nconst PageContainer = ({ children }) => (\n  <div className=\"container-fluid\">\n    {children}\n  </div>\n);\n\nPageContainer.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default PageContainer;\n","import React, { Fragment } from 'react';\nimport NavBar from '../../features/NavBar/NavBar';\nimport PageContainer from '../PageContainer/PageContainer';\n\ninterface IProps {\n  children: React.ReactChild;\n}\n\nconst MainLayout = (props: IProps) => {\n  return (\n    <Fragment>\n      <PageContainer>\n        <NavBar></NavBar>\n        {props.children}\n      </PageContainer>\n    </Fragment>\n  );\n};\n\nexport default MainLayout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PageTitle.scss';\n\nconst PageTitle = ({ children }) => (\n  <h1 className=\"page-title\">\n     {children}\n  </h1>\n);\n\nPageTitle.propTypes = {\n  children: PropTypes.string,\n};\n\nexport default PageTitle;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Button.scss';\r\n\r\nconst Button = ({ variant = '', children, ...otherProps }) => (\r\n  <button { ...otherProps } className={ `button button--${variant}`}>\r\n    { children }\r\n  </button>\r\n);\r\n\r\nButton.propTypes = {\r\n  variant: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './SmallTitle.scss';\n\nconst SmallTitle = ({ children, ...otherProps }) => (\n  <h2 {...otherProps} className=\"small-title\">\n    { children }\n  </h2>\n);\n\nSmallTitle.propTypes = {\n  children: PropTypes.string,\n};\n\nexport default SmallTitle;\n","import React from 'react';\nimport ReactHtmlParser from 'react-html-parser';\n\ninterface IProps {\n  children: string;\n}\n\nconst HtmlBox = (props: IProps) => (\n  <div className=\"html-box\">{ReactHtmlParser(props.children)}</div>\n);\n\nexport default HtmlBox;\n","import React from 'react';\n\nimport style from './TextBlock.module.scss';\n\ninterface IProps {\n  children: string;\n  role: 'primary' | 'secondary';\n}\n\nconst TextBlock = (props: IProps) => {\n  return (\n    <p\n      className={\n        props.role === 'primary'\n          ? style.author_text\n          : props.role === 'secondary'\n          ? style.author_text_secondary\n          : ''\n      }\n    >\n      {props.children}\n    </p>\n  );\n};\n\nTextBlock.defaultProps = {\n  role: 'primary'\n};\n\nexport default TextBlock;\n","import React, { useState } from 'react';\n\nimport { IProps, dispatchToProps } from './LikesContainer';\n\nimport style from './likes.module.scss';\n\ntype Props = IProps & dispatchToProps;\n\nconst Likes = (props: Props) => {\n  const [likes, handleLike] = useState(props.likes);\n\n  const likeUpdate = (value: number) => {\n    handleLike(likes + value);\n    props.likePost(props.id, value);\n  };\n\n  return (\n    <div className={style.like_box}>\n      {likes} likes\n      <br />\n      <button\n        className={style.like_btn}\n        onClick={() => {\n          likeUpdate(1);\n        }}\n      >\n        Like\n      </button>\n      <button\n        className={style.like_btn_dislike}\n        onClick={() => {\n          likeUpdate(-1);\n        }}\n      >\n        Dislike\n      </button>\n    </div>\n  );\n};\n\nexport default Likes;\n","import { Post } from '../types/post';\n\nexport const POSTS_GET_ALL = 'POSTS_GET_ALL';\nexport const POSTS_GET_PAGE = 'POSTS_GET_PAGE';\nexport const POSTS_GET_ONE = 'POSTS_GET_ONE';\nexport const POSTS_ADD_ONE = 'POSTS_ADD_ONE';\nexport const POSTS_LIKE = 'POSTS_LIKE';\nexport const POSTS_RESET_SINGLE_POST = 'POSTS_RESET_SINGLE_POST';\nexport const POSTS_START_REQUEST = 'POSTS_START_REQUEST';\nexport const POSTS_END_REQUEST = 'POSTS_END_REQUEST';\nexport const POSTS_ERROR = 'POSTS_ERROR';\n\n// MISC\nexport const RESET_REQUEST_DATA = 'RESET_REQUEST_DATA';\n\ninterface postsGetAllActionType {\n  type: typeof POSTS_GET_ALL;\n  payload: Post[];\n}\n\ninterface postsGetPageActionType {\n  type: typeof POSTS_GET_PAGE;\n  payload: {\n    data: Post[];\n    postsPerPage: number;\n    presentPage: number;\n    amount: number;\n  };\n}\n\ninterface postsGetOneActionType {\n  type: typeof POSTS_GET_ONE;\n  payload: Post;\n}\n\ninterface postsAddOneActionType {\n  type: typeof POSTS_ADD_ONE;\n  payload: Boolean;\n}\n\ninterface postsLikesActionType {\n  type: typeof POSTS_LIKE;\n}\n\ninterface postsStartRequestActionType {\n  type: typeof POSTS_START_REQUEST;\n}\n\ninterface postsEndRequestActionType {\n  type: typeof POSTS_END_REQUEST;\n}\n\ninterface postsErrorActionType {\n  type: typeof POSTS_ERROR;\n  payload: string;\n}\n\ninterface postsResetSinglePostActionType {\n  type: typeof POSTS_RESET_SINGLE_POST;\n}\n\ninterface resetRequestDataActionType {\n  type: typeof RESET_REQUEST_DATA;\n}\n\nexport type ActionTypes =\n  | postsGetAllActionType\n  | postsStartRequestActionType\n  | postsEndRequestActionType\n  | postsErrorActionType\n  | postsGetOneActionType\n  | postsResetSinglePostActionType\n  | postsAddOneActionType\n  | resetRequestDataActionType\n  | postsGetPageActionType\n  | postsLikesActionType;\n","import * as types from './actionTypes';\nimport { ActionTypes } from './actionTypes';\nimport { Post } from '../types/post';\nimport { Dispatch } from 'redux';\nimport axios from 'axios';\n\n// NAME CREATORS\nconst reducerName = 'posts';\nconst createActionName = (name: string) => `app/${reducerName}/${name}`;\n\n// SELECTORS\nexport const selectorPostsAll = (state: postsState): Post[] => {\n  return state.data;\n};\nexport const selectorPageCount = (state: postsState): number => {\n  return Math.ceil(state.amount / state.postsPerPage);\n};\nexport const selectorActivePage = (state: postsState): number => {\n  return state.presentPage;\n};\nexport const selectorPostById = (state: postsState, id: String): Post[] => {\n  return state.data.filter(post => post.id === id);\n};\nexport const selectorPostsAllFromLatest = (state: postsState): Post[] => {\n  return state.data.sort(\n    (a, b) => new Date(b.createdAt).valueOf() - new Date(a.createdAt).valueOf()\n  );\n};\nexport const selectorPostsPending = (state: postsState): Boolean => {\n  return state.request.pending;\n};\nexport const selectorPostsCount = (state: postsState): string => {\n  if (state.amount > 0) {\n    return state.amount.toString();\n  } else {\n    return 'no posts';\n  }\n};\nexport const selectorPostsErrorMsg = (state: postsState): string => {\n  const { errorMsg } = state.request;\n  return errorMsg === null ? '' : errorMsg;\n};\nexport const selectorPostsError = (state: postsState): Boolean => {\n  return state.request.error;\n};\nexport const selectorPostsSuccess = (state: postsState): Boolean => {\n  return state.request.success;\n};\nexport const selectorPostsPostSuccess = (state: postsState): Boolean => {\n  return state.request.postSuccess;\n};\nexport const selectorPostsGetOne = (state: postsState): Post => {\n  return state.singlePost[0];\n};\n\n// ACTIONS\nexport const postsGetAll = (posts: Post[]): ActionTypes => ({\n  type: types.POSTS_GET_ALL,\n  payload: posts\n});\n\nexport const postsGetPage = (payload: {\n  data: Post[];\n  postsPerPage: number;\n  presentPage: number;\n  amount: number;\n}): ActionTypes => ({\n  type: types.POSTS_GET_PAGE,\n  payload\n});\n\nexport const postsLike = (): ActionTypes => ({\n  type: types.POSTS_LIKE\n});\n\nexport const postsStartRequest = (): ActionTypes => ({\n  type: types.POSTS_START_REQUEST\n});\n\nexport const postsEndRequest = (): ActionTypes => ({\n  type: types.POSTS_END_REQUEST\n});\n\nexport const postsError = (errorMsg: string): ActionTypes => ({\n  type: types.POSTS_ERROR,\n  payload: errorMsg\n});\n\nexport const postsGetOne = (post: Post): ActionTypes => ({\n  type: types.POSTS_GET_ONE,\n  payload: post\n});\n\nexport const postsPostPutSuccess = (success: Boolean): ActionTypes => ({\n  type: types.POSTS_ADD_ONE,\n  payload: success\n});\n\nexport const postsResetSinglePost = (): ActionTypes => ({\n  type: types.POSTS_RESET_SINGLE_POST\n});\n\nexport const resetRequestData = (): ActionTypes => ({\n  type: types.RESET_REQUEST_DATA\n});\n\n// THUNKS\nexport const postsFetchAll = () => {\n  return async (dispatch: Dispatch<ActionTypes>) => {\n    dispatch(postsStartRequest());\n    try {\n      let response = await axios.get('/blog/api/posts');\n      let data = await response.data;\n\n      dispatch(postsGetAll(data));\n      dispatch(postsEndRequest());\n    } catch (err) {\n      dispatch(postsError(err.message));\n    }\n  };\n};\n\nexport const postsFetchPage = (\n  page: number,\n  postsPerPage: number = initState.postsPerPage\n) => {\n  return async (dispatch: Dispatch<ActionTypes>) => {\n    dispatch(postsStartRequest());\n\n    const startIndex = (page - 1) * postsPerPage;\n\n    try {\n      let response = await axios.get(\n        `/blog/api/posts/range/${startIndex}/${postsPerPage}`\n      );\n      const payload = {\n        postsPerPage,\n        presentPage: page,\n        amount: response.data.postsCount,\n        data: response.data.posts\n      };\n      dispatch(postsEndRequest());\n      dispatch(postsGetPage(payload));\n    } catch (err) {\n      dispatch(postsError(err.message));\n    }\n  };\n};\n\nexport const postsFetchOneById = (id: string) => {\n  return async (dispatch: Dispatch<ActionTypes>) => {\n    dispatch(postsResetSinglePost());\n    dispatch(postsStartRequest());\n    try {\n      let response = await axios.get(`/blog/api/post/${id}`);\n      let data = await response.data;\n      dispatch(postsGetOne(data));\n      dispatch(postsEndRequest());\n    } catch (err) {\n      dispatch(postsError(err.message));\n    }\n  };\n};\n\nexport const postsFetchRandom = () => {\n  return async (dispatch: Dispatch<ActionTypes>) => {\n    dispatch(postsResetSinglePost());\n    dispatch(postsStartRequest());\n    try {\n      let response = await axios.get('/blog/api/post/random');\n      let data = await response.data;\n      dispatch(postsGetOne(data.randomPost));\n      dispatch(postsEndRequest());\n    } catch (err) {\n      dispatch(postsError(err.message));\n    }\n  };\n};\n\nexport const postsLikeThunk = (id: string, value: number) => {\n  return async (dispatch: Dispatch<ActionTypes>) => {\n    try {\n      let response = await axios.put(`/blog/api/post/likes/${id}/${value}`);\n      dispatch(postsLike());\n    } catch (err) {\n      dispatch(postsError(err.message));\n    }\n  };\n};\n\nexport const postsAddPostThunk = (post: Post) => {\n  return async (dispatch: Dispatch<ActionTypes>) => {\n    try {\n      dispatch(postsStartRequest());\n\n      let response = await axios.post('/blog/api/posts', post);\n      dispatch(postsEndRequest());\n      dispatch(postsPostPutSuccess(true));\n    } catch (err) {\n      dispatch(postsError(err.message));\n    }\n  };\n};\n\nexport const postsEditPostThunk = (\n  id: String,\n  data: { title: String; content: String; author: String }\n) => {\n  return async (dispatch: Dispatch<ActionTypes>) => {\n    try {\n      dispatch(postsStartRequest());\n\n      let response = await axios.put(`/blog/api/post/${id}`, data);\n      dispatch(postsEndRequest());\n      dispatch(postsPostPutSuccess(true));\n    } catch (err) {\n      dispatch(postsError(err.message));\n    }\n  };\n};\n\n// REDUCERS\n\ninterface postsState {\n  data: Post[];\n  singlePost: Post[];\n  amount: number;\n  postsPerPage: number;\n  presentPage: number;\n  request: {\n    pending: boolean;\n    error: Boolean;\n    success: Boolean;\n    postSuccess: Boolean;\n    errorMsg: string | null;\n  };\n}\n\nconst initState: postsState = {\n  data: [],\n  amount: 0,\n  presentPage: 1,\n  postsPerPage: 4,\n  singlePost: [\n    {\n      title: '',\n      author: '',\n      content: '',\n      id: '',\n      _id: '',\n      likes: 0,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }\n  ],\n  request: {\n    pending: false,\n    error: false,\n    postSuccess: false,\n    success: false,\n    errorMsg: null\n  }\n};\n\nexport function postsReducer(state = initState, action: ActionTypes) {\n  switch (action.type) {\n    case types.POSTS_GET_ALL:\n      return { ...state, data: action.payload };\n    case types.POSTS_GET_PAGE:\n      return {\n        ...state,\n        data: action.payload.data,\n        amount: action.payload.amount,\n        presentPage: action.payload.presentPage,\n        postsPerPage: action.payload.postsPerPage\n      };\n    case types.POSTS_GET_ONE:\n      return {\n        ...state,\n        singlePost: [action.payload]\n      };\n    case types.POSTS_ADD_ONE:\n      return {\n        ...state,\n        request: { ...state.request, postSuccess: action.payload }\n      };\n    case types.POSTS_RESET_SINGLE_POST:\n      return { ...state, singlePost: [] };\n    case types.POSTS_START_REQUEST:\n      return {\n        ...state,\n        request: {\n          ...state.request,\n          pending: true,\n          success: false,\n          postSuccess: false,\n          error: false\n        }\n      };\n    case types.POSTS_END_REQUEST:\n      return {\n        ...state,\n        request: {\n          ...state.request,\n          pending: false,\n          error: false,\n          success: true,\n          postSuccess: false,\n          errorMsg: ''\n        }\n      };\n    case types.POSTS_ERROR:\n      return {\n        ...state,\n        request: {\n          ...state.request,\n          success: false,\n          postSuccess: false,\n          error: true,\n          pending: false,\n          errorMsg: action.payload\n        }\n      };\n    case types.RESET_REQUEST_DATA:\n      return {\n        ...state,\n        request: {\n          pending: false,\n          success: false,\n          error: false,\n          errorMsg: '',\n          postSuccess: false\n        }\n      };\n    default:\n      return state;\n  }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Likes from './Likes';\nimport { AppState } from '../../../redux/store';\nimport { postsLikeThunk } from '../../../redux/postsRedux';\nimport { ActionTypes } from '../../../redux/actionTypes';\nimport { ThunkDispatch } from 'redux-thunk';\n\nexport interface IProps {\n  id: string;\n  likes: number;\n}\n\nexport interface dispatchToProps {\n  likePost: Function;\n}\n\nconst mapStateToProps = (state: AppState, ownProps: IProps) => ({\n  id: ownProps.id,\n  likes: ownProps.likes\n});\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<any, any, ActionTypes>\n) => ({\n  likePost: (id: string, value: number) => dispatch(postsLikeThunk(id, value))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Likes);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { Post } from '../../../types/post';\n\nimport { cutText } from '../../../utils/cutText';\n\nimport Button from '../../common/Button/Button';\nimport SmallTitle from '../../common/SmallTitle/SmallTitle';\nimport HtmlBox from '../../common/HtmlBox/HtmlBox';\nimport TextBlock from '../../common/TextBlock/TextBlock';\nimport Likes from '../Likes/LikesContainer';\n\nimport './PostSummary.scss';\n\nconst PostSummary = (props: Post) => {\n  const { title, content, id, author, createdAt, likes } = props;\n\n  return (\n    <article className=\"post-summary\">\n      <SmallTitle>{title}</SmallTitle>\n      <Likes id={id} likes={likes} />\n      <TextBlock role=\"secondary\">{`By: ${author}`}</TextBlock>\n      <TextBlock role=\"secondary\">{`Added: ${new Date(\n        createdAt\n      ).toLocaleString()}`}</TextBlock>\n      <HtmlBox>{cutText(content, 100)}</HtmlBox>\n      <Link to={`/blog/posts/${id}`}>\n        <Button variant=\"primary\">Read more</Button>\n      </Link>\n      {/* <Link to={`/posts/edit/${id}`}>\n        <Button variant=\"danger\">Edit post</Button>\n      </Link> */}\n    </article>\n  );\n};\n\nexport default PostSummary;\n","export function cutText(text: string, maxLength: number): string {\n  const lastSpaceIndex = text.substr(0, maxLength).lastIndexOf(' ');\n\n  return `${text.substr(0, lastSpaceIndex)}...`;\n}\n","import React from 'react';\n\nimport PostSummary from '../PostSummary/PostSummary';\nimport { Post } from '../../../types/post';\n\ninterface IProps {\n  posts: Post[];\n}\n\nconst PostsList = (props: IProps) => (\n  <div>\n    <section className=\"posts-list\">\n      {props.posts.map(post => (\n        <PostSummary key={post.id} {...post} />\n      ))}\n    </section>\n  </div>\n);\n\nexport default PostsList;\n","import React, { Component } from 'react';\n\nimport style from './Pagination.module.scss';\n\ninterface IProps {\n  pages: number;\n  initialPage: number;\n  onPageChange: Function;\n  activePage: number;\n}\n\ninterface IState {\n  presentPage: number;\n}\n\nexport default class Pagination extends Component<IProps, IState> {\n  static defaultProps = {\n    initialPage: 1,\n    activePage: 1\n  };\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      presentPage: this.props.initialPage\n    };\n  }\n\n  changePage = (newPage: number) => {\n    const { onPageChange } = this.props;\n    this.setState({\n      presentPage: newPage\n    });\n\n    onPageChange(newPage);\n  };\n\n  render() {\n    const { pages, activePage } = this.props;\n    const { changePage } = this;\n\n    return (\n      <div className={style.pagination}>\n        <ul className={style.pagination__list}>\n          {activePage > 1 && (\n            <li\n              className={style.pagination__list__item}\n              onClick={() => {\n                changePage(activePage - 1);\n              }}\n            >\n              {'<'}\n            </li>\n          )}\n          {[...Array(pages)].map((el, page) => (\n            <li\n              key={++page}\n              onClick={() => {\n                changePage(page);\n              }}\n              className={`${style.pagination__list__item} ${\n                page === activePage ? style.pagination__list__item_active : ''\n              }`}\n            >\n              {page}\n            </li>\n          ))}\n          {activePage < pages && (\n            <li\n              className={style.pagination__list__item}\n              onClick={() => {\n                changePage(activePage + 1);\n              }}\n            >\n              {'>'}\n            </li>\n          )}\n        </ul>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Animated } from 'react-animated-css';\n\nimport './Spinner.scss';\n\nconst Spinner = () => (\n  <Animated animationIn=\"fadeIn\" animationOut=\"fadeOut\">\n    <div className=\"lds-ellipsis\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  </Animated>\n);\n\nexport default Spinner;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Animated } from 'react-animated-css';\r\nimport { MdInfoOutline, MdDone, MdErrorOutline } from 'react-icons/md';\r\n\r\nimport './Alert.scss';\r\n\r\nconst Alert = ({ variant = '', children, ...otherProps }) => {\r\n\r\n  const icon = () => {\r\n    switch(variant) {\r\n      case 'info':\r\n        return <MdInfoOutline />\r\n      case 'success':\r\n        return <MdDone />\r\n      case 'warning':\r\n        return <MdErrorOutline />\r\n      case 'error':\r\n        return <MdErrorOutline />\r\n      default:\r\n        return <MdInfoOutline />\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Animated animationIn=\"fadeIn\" animationOut=\"fadeOut\">\r\n      <div {...otherProps} className={`alert alert--${variant}`}>\r\n        {icon()}\r\n        <span className=\"alert__desc\">{children}</span>\r\n      </div>\r\n    </Animated>\r\n  )\r\n\r\n};\r\n\r\nAlert.propTypes = {\r\n  variant: PropTypes.string.isRequired,\r\n  children: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Alert;\r\n","import React from 'react';\n\nimport PostsList from '../PostsList/PostsList';\nimport Pagination from '../../common/Pagination/Pagination';\nimport Spinner from '../../common/Spinner/Spinner';\nimport Alert from '../../common/Alert/Alert';\n\nimport { stateToProps, dispatchToProps } from './PostsContainer';\n\ninterface IProps {}\n\ninterface IState {}\n\ntype Props = stateToProps & dispatchToProps & IProps;\n\nclass Posts extends React.Component<Props, IState> {\n  static defaultProps = {\n    initPage: 1,\n    pagination: true,\n    random: false\n  };\n\n  componentDidMount() {\n    const {\n      postsGetPage,\n      postsGetRandom,\n      resetRequestData,\n      initPage,\n      postsPerPage,\n      random\n    } = this.props;\n\n    resetRequestData();\n\n    // random && postsGetRandom();\n    // postsPerPage\n    //   ? postsGetPage(initPage, postsPerPage)\n    //   : postsGetPage(initPage);\n\n    if (!random) {\n      postsPerPage\n        ? postsGetPage(initPage, postsPerPage)\n        : postsGetPage(initPage);\n    } else {\n      postsGetRandom();\n    }\n  }\n\n  pageChange = (pageNo: number) => {\n    const { postsGetPage, postsPerPage } = this.props;\n\n    postsPerPage ? postsGetPage(pageNo, postsPerPage) : postsGetPage(pageNo);\n  };\n\n  render() {\n    const {\n      activePage,\n      posts,\n      singlePost,\n      random,\n      pending,\n      error,\n      success,\n      errorMsg,\n      noOfPages,\n      pagination\n    } = this.props;\n\n    if (!pending && !success && error)\n      return <Alert variant={'error'}>{errorMsg}</Alert>;\n\n    if (random) {\n      if (!pending && success && !error && !singlePost)\n        return <Alert variant={'info'}>No posts...</Alert>;\n    }\n\n    if (!random) {\n      if (!pending && success && !error && posts.length === 0)\n        return <Alert variant={'info'}>No posts...</Alert>;\n    }\n\n    if (pending || (!success && posts.length === 0)) return <Spinner></Spinner>;\n\n    if (!success) return <Spinner></Spinner>;\n\n    if (!pending && success && !error && (posts.length > 0 || singlePost))\n      return (\n        <div>\n          <PostsList posts={random ? [singlePost] : posts} />\n          {pagination && (\n            <Pagination\n              activePage={activePage}\n              pages={noOfPages}\n              onPageChange={(page: number) => {\n                this.pageChange(page);\n              }}\n            />\n          )}\n        </div>\n      );\n  }\n}\n\nexport default Posts;\n","import { connect } from 'react-redux';\n\nimport Posts from './Posts';\nimport { AppState } from '../../../redux/store';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { ActionTypes } from '../../../redux/actionTypes';\nimport {\n  selectorPostsPending,\n  selectorPostsError,\n  selectorPostsSuccess,\n  selectorPostsErrorMsg,\n  resetRequestData,\n  postsFetchPage,\n  selectorPostsAll,\n  selectorPageCount,\n  selectorActivePage,\n  selectorPostsGetOne,\n  postsFetchRandom\n} from '../../../redux/postsRedux';\n\nimport { Post } from '../../../types/post';\n\ninterface ownProps {\n  initPage?: number;\n  postsPerPage?: number | null;\n  pagination?: Boolean;\n  random?: Boolean;\n}\n\nexport interface stateToProps {\n  posts: Post[];\n  singlePost: Post;\n  pending: Boolean;\n  error: Boolean;\n  success: Boolean;\n  errorMsg: string;\n  noOfPages: number;\n  activePage: number;\n  initPage?: number;\n  postsPerPage?: number | null;\n  pagination?: Boolean;\n  random?: Boolean;\n}\n\nexport interface dispatchToProps {\n  postsGetPage: Function;\n  postsGetRandom: Function;\n  resetRequestData: Function;\n}\n\nconst mapStateToProps = (state: AppState, ownProps: ownProps) => ({\n  posts: selectorPostsAll(state.postsReducer),\n  singlePost: selectorPostsGetOne(state.postsReducer),\n  pending: selectorPostsPending(state.postsReducer),\n  error: selectorPostsError(state.postsReducer),\n  success: selectorPostsSuccess(state.postsReducer),\n  errorMsg: selectorPostsErrorMsg(state.postsReducer),\n  noOfPages: selectorPageCount(state.postsReducer),\n  activePage: selectorActivePage(state.postsReducer),\n  initPage: ownProps.initPage,\n  postsPerPage: ownProps.postsPerPage,\n  pagination: ownProps.pagination,\n  random: ownProps.random\n});\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<any, any, ActionTypes>\n) => ({\n  postsGetPage: (page: number, postsPerPage: number) =>\n    dispatch(postsFetchPage(page, postsPerPage)),\n  resetRequestData: () => dispatch(resetRequestData()),\n  postsGetRandom: () => dispatch(postsFetchRandom())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Posts);\n","import React from 'react';\n\nimport PageTitle from '../../common/PageTitle/PageTitle';\nimport Posts from '../../features/Posts/PostsContainer';\n\nconst HomePage = () => {\n  return (\n    <div>\n      <PageTitle>Blog</PageTitle>\n      <Posts pagination={false} postsPerPage={3}></Posts>\n    </div>\n  );\n};\n\nexport default HomePage;\n","import React from 'react';\n\ninterface IProps {\n  postsCount: string;\n}\n\nclass PostsCounter extends React.Component<IProps, {}> {\n  render() {\n    const { postsCount } = this.props;\n\n    return <div>Posts amount: {postsCount}</div>;\n  }\n}\n\nexport default PostsCounter;\n","import { connect } from 'react-redux';\nimport { AppState } from '../../../redux/store';\nimport { selectorPostsCount } from '../../../redux/postsRedux';\nimport PostsCounter from './PostsCounter';\n\nconst mapStateToProps = (state: AppState) => ({\n  postsCount: selectorPostsCount(state.postsReducer)\n});\n\nexport default connect(mapStateToProps)(PostsCounter);\n","import React from 'react';\n\nimport PageTitle from '../../common/PageTitle/PageTitle';\nimport PostsCounterContainer from '../../features/PostsCounter/PostsCounterContainer';\nimport PostsContainer from '../../features/Posts/PostsContainer';\n\nconst PostsPage = () => {\n  return (\n    <div>\n      <PageTitle>Posts list</PageTitle>\n      <PostsCounterContainer />\n      <PostsContainer />\n    </div>\n  );\n};\n\nexport default PostsPage;\n","export const BASE_URL = process.env.BASE_URL || 'http://www.localhost:3000';\nexport const FACEBOOK_APP_ID = '561114797761802';\nexport const URL_PREFIX = '/blog';\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { FacebookProvider, Comments, ShareButton } from 'react-facebook';\n\nimport PageTitle from '../../common/PageTitle/PageTitle';\nimport HtmlBox from '../../common/HtmlBox/HtmlBox';\nimport TextBlock from '../../common/TextBlock/TextBlock';\nimport Spinner from '../../common/Spinner/Spinner';\nimport Likes from '../Likes/LikesContainer';\n\nimport { stateToProps, dispatchToProps } from './PostContainer';\nimport { RouteComponentProps } from 'react-router';\n\nimport style from './share_btn.module.scss';\nimport * as config from '../../../config';\n\ntype Props = RouteComponentProps & stateToProps & dispatchToProps;\n\ninterface IState {}\n\nclass Post extends Component<Props, IState> {\n  componentDidMount() {\n    const { fetchPost, postId } = this.props;\n\n    fetchPost(postId);\n  }\n\n  render() {\n    const { singlePost, pending, success, error, location } = this.props;\n\n    if (pending) return <Spinner></Spinner>;\n\n    if (singlePost.title === '' || singlePost.content === '')\n      return <Spinner></Spinner>;\n\n    if (!pending && !success && error) return <p>error</p>;\n\n    if (!singlePost) return <p> </p>;\n\n    if (!pending && success && !error) {\n      return (\n        <div>\n          <PageTitle>{singlePost.title}</PageTitle>\n          <FacebookProvider appId={config.FACEBOOK_APP_ID}>\n            <ShareButton\n              className={style.share_btn}\n              href={`${config.BASE_URL}${location.pathname}`}\n            >\n              Share on Facebook\n            </ShareButton>\n            <TextBlock role=\"secondary\">{`By: ${singlePost.author}`}</TextBlock>\n            <TextBlock role=\"secondary\">{`Added: ${new Date(\n              singlePost.createdAt\n            ).toLocaleString()}`}</TextBlock>\n            <HtmlBox>{singlePost.content}</HtmlBox>\n            <Likes id={singlePost.id} likes={singlePost.likes} />\n            <Comments\n              width=\"100%\"\n              href={`${config.BASE_URL}${location.pathname}`}\n            />\n          </FacebookProvider>\n        </div>\n      );\n    }\n  }\n}\n\nexport default withRouter(Post);\n","import { connect } from 'react-redux';\nimport { AppState } from '../../../redux/store';\nimport {\n  selectorPostsGetOne,\n  postsFetchOneById,\n  selectorPostsPending,\n  selectorPostsError,\n  selectorPostsSuccess,\n  selectorPostsErrorMsg\n} from '../../../redux/postsRedux';\n\nimport PostPage from './Post';\n\nimport { ThunkDispatch } from 'redux-thunk';\nimport { ActionTypes } from '../../../redux/actionTypes';\nimport { Post } from '../../../types/post';\n\nexport interface stateToProps {\n  singlePost: Post;\n  postId: string;\n  pending: Boolean;\n  error: Boolean;\n  success: Boolean;\n  errorMsg: string;\n}\n\nexport interface dispatchToProps {\n  fetchPost: Function;\n}\n\nconst mapStateToProps = (state: AppState, ownProps: { id: string }) => ({\n  singlePost: selectorPostsGetOne(state.postsReducer),\n  postId: ownProps.id,\n  pending: selectorPostsPending(state.postsReducer),\n  error: selectorPostsError(state.postsReducer),\n  success: selectorPostsSuccess(state.postsReducer),\n  errorMsg: selectorPostsErrorMsg(state.postsReducer)\n});\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<any, any, ActionTypes>\n) => ({\n  fetchPost: (id: string) => dispatch(postsFetchOneById(id))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PostPage);\n","import React from 'react';\n\nimport PostContainer from '../../features/Post/PostContainer';\n\nconst PostPage = (props: any) => {\n  return (\n    <div>\n      <PostContainer id={props.match.params.id} />\n    </div>\n  );\n};\n\nexport default PostPage;\n","import React from 'react';\n\nconst NotFoundPage = () => {\n  return (\n    <div>\n      <h1>Page not found... :C</h1>\n    </div>\n  );\n};\n\nexport default NotFoundPage;\n","import React, { Component } from 'react';\n\nimport { Switch, Route } from 'react-router-dom';\n\nimport MainLayout from './components/layout/MainLayout/MainLayout';\n\nimport Home from './components/pages/Home/HomePage';\nimport Posts from './components/pages/Posts/PostsPage';\nimport PostRandom from './components/pages/RandomPost/RandomPostPage';\nimport PostPage from './components/pages/Post/PostPage';\nimport PostEditPage from './components/pages/EditPost/PostEditPage';\nimport AddPost from './components/pages/AddPost/AddPostPage';\nimport Contact from './components/pages/Contact/ContactPage';\nimport NotFound from './components/pages/NotFound/NotFoundPage';\n\nclass App extends Component<{}, {}> {\n  render() {\n    return (\n      <MainLayout>\n        <Switch>\n          <Route path=\"/blog/\" exact component={Home} />\n          {/* <Route path=\"/post/random\" exact component={PostRandom} /> */}\n          <Route path=\"/blog/posts\" exact component={Posts} />\n          {/* <Route path=\"/posts/new\" exact component={AddPost} /> */}\n          <Route path=\"/blog/posts/:id\" exact component={PostPage} />\n          {/* <Route path=\"/posts/edit/:id\" exact component={PostEditPage} /> */}\n          {/* <Route path=\"/contact\" exact component={Contact} /> */}\n          <Route component={NotFound} />\n        </Switch>\n      </MainLayout>\n    );\n  }\n}\n\nexport default App;\n","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport thunk, { ThunkMiddleware } from 'redux-thunk';\n\nimport { postsReducer } from './postsRedux';\nimport { ActionTypes } from './actionTypes';\n\nconst rootReducer = combineReducers({\n  postsReducer\n});\n\nconst middleware =\n  process.env.REACT_APP_MODE === 'development'\n    ? compose(\n        applyMiddleware(thunk as ThunkMiddleware<AppState, ActionTypes>),\n        (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\n          (window as any).__REDUX_DEVTOOLS_EXTENSION__()\n      )\n    : compose(applyMiddleware(thunk as ThunkMiddleware<AppState, ActionTypes>));\n\nexport const store = createStore(rootReducer, middleware);\n\nexport type AppState = ReturnType<typeof rootReducer>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nimport './styles/global.scss';\nimport 'animate.css/animate.min.css';\n\nconst Root = () => (\n  <Router>\n    <App />\n  </Router>\n);\n\nReactDOM.render(\n  <Provider store={store as any}>\n    <Root />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// store as any in Provider because of the redux version (in the Kodilla scripts the recommended version is 4.0.1 so is the one in the project. Decided to fix it that way instead of updating)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Pagination_pagination__1kLD1\",\"pagination__list\":\"Pagination_pagination__list__djh5l\",\"pagination__list__item\":\"Pagination_pagination__list__item__2Nqfl\",\"pagination__list__item_active\":\"Pagination_pagination__list__item_active__3d-Kr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"like_box\":\"likes_like_box__20Lkp\",\"like_btn\":\"likes_like_btn__38QB5\",\"like_btn_dislike\":\"likes_like_btn_dislike__14cVD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"author_text\":\"TextBlock_author_text__jnC-Y\",\"author_text_secondary\":\"TextBlock_author_text_secondary__3OE4S\"};"],"sourceRoot":""}